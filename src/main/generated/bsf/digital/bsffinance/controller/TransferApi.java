/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package bsf.digital.bsffinance.controller;

import bsf.digital.bsffinance.model.Problem;
import bsf.digital.bsffinance.model.TransferRequestBody;
import bsf.digital.bsffinance.model.TransferResponseEntity;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-06T18:37:37.996902+02:00[Africa/Cairo]")

@Validated
@Api(value = "transfer", description = "the transfer API")
public interface TransferApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "smh message to contac center to be sent to async gateway", nickname = "receiveMessage", notes = "Notify system of Message from SMH", response = TransferResponseEntity.class, tags={ "Message from SMH to Async GW", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = TransferResponseEntity.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Problem.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Problem.class) })
    @RequestMapping(value = "/transfer",
        produces = { "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TransferResponseEntity> receiveMessage(@ApiParam(value = "The SMH message request body." ,required=true )  @Valid @RequestBody TransferRequestBody transferRequestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
